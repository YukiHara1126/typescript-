{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["function heapSort(arr: number[]) {\n  let len = arr.length;\n  for (let i = Math.floor(len / 2); i >= 0; i--) {\n    heapify(arr, len, i);\n  }\n  for (let i = arr.length - 1; i > 0; i--) {\n    swap(arr, 0, i);\n    len--;\n    heapify(arr, len, 0);\n  }\n  return arr;\n}\n\nfunction heapify(arr: number[], len: number, i: number) {\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n  let largest = i;\n\n  if (left < len && arr[left] > arr[largest]) {\n    largest = left;\n  }\n\n  if (right < len && arr[right] > arr[largest]) {\n    largest = right;\n  }\n\n  if (largest != i) {\n    swap(arr, i, largest);\n    heapify(arr, len, largest);\n  }\n}\n\nfunction swap(arr: number[], a: number, b: number) {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n}\n\n\nfunction bubbleSort(arr: number[]) {\n  let swapped: boolean;\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}\n\n\nfunction selectionSort(arr: number[]) {\n  for (let i = 0; i < arr.length; i++) {\n    let min = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[min]) {\n        min = j;\n      }\n    }\n    if (i !== min) {\n      let temp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = temp;\n    }\n  }\n  return arr;\n}\n\n// console.log(bubbleSort([5, 3, 8, 2, 1, 4]));\n\nconsole.log(heapSort([11, 101, 2, 3, 400, 5, 6, 1, 8, 9]));\n\n// console.log(selectionSort([1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]));\n\n"],
  "mappings": "AAAA,kBAAkB,KAAe;AAC/B,MAAI,MAAM,IAAI;AACd,WAAS,IAAI,KAAK,MAAM,MAAM,IAAI,KAAK,GAAG,KAAK;AAC7C,YAAQ,KAAK,KAAK;AAAA;AAEpB,WAAS,IAAI,IAAI,SAAS,GAAG,IAAI,GAAG,KAAK;AACvC,SAAK,KAAK,GAAG;AACb;AACA,YAAQ,KAAK,KAAK;AAAA;AAEpB,SAAO;AAAA;AAGT,iBAAiB,KAAe,KAAa,GAAW;AACtD,MAAI,OAAO,IAAI,IAAI;AACnB,MAAI,QAAQ,IAAI,IAAI;AACpB,MAAI,UAAU;AAEd,MAAI,OAAO,OAAO,IAAI,QAAQ,IAAI,UAAU;AAC1C,cAAU;AAAA;AAGZ,MAAI,QAAQ,OAAO,IAAI,SAAS,IAAI,UAAU;AAC5C,cAAU;AAAA;AAGZ,MAAI,WAAW,GAAG;AAChB,SAAK,KAAK,GAAG;AACb,YAAQ,KAAK,KAAK;AAAA;AAAA;AAItB,cAAc,KAAe,GAAW,GAAW;AACjD,MAAI,OAAO,IAAI;AACf,MAAI,KAAK,IAAI;AACb,MAAI,KAAK;AAAA;AAIX,oBAAoB,KAAe;AACjC,MAAI;AACJ,KAAG;AACD,cAAU;AACV,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAI,IAAI,KAAK,IAAI,IAAI,IAAI;AACvB,YAAI,OAAO,IAAI;AACf,YAAI,KAAK,IAAI,IAAI;AACjB,YAAI,IAAI,KAAK;AACb,kBAAU;AAAA;AAAA;AAAA,WAGP;AACT,SAAO;AAAA;AAIT,uBAAuB,KAAe;AACpC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,QAAI,MAAM;AACV,aAAS,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACvC,UAAI,IAAI,KAAK,IAAI,MAAM;AACrB,cAAM;AAAA;AAAA;AAGV,QAAI,MAAM,KAAK;AACb,UAAI,OAAO,IAAI;AACf,UAAI,KAAK,IAAI;AACb,UAAI,OAAO;AAAA;AAAA;AAGf,SAAO;AAAA;AAKT,QAAQ,IAAI,SAAS,CAAC,IAAI,KAAK,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG;",
  "names": []
}
